<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DAO</name>
    </assembly>
    <members>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.NumberOfSessionRepository">
            <summary>
            Exam number of session repository which have been implemented NumberOfSession model
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.NumberOfSessionRepository.#ctor(System.String)">
            <summary>
            Constructor number of session repository
            </summary>
            <param name="dbConStr">database connection string</param>
        </member>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.ExamScheduleRepository">
            <summary>
            Exam shedule repository which have been implemented ExamSchedule model
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.ExamScheduleRepository.#ctor(System.String)">
            <summary>
            Constructor exam schedule repository
            </summary>
            <param name="dbConStr">database connection string</param>
        </member>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.GroupRepository">
            <summary>
            Group repository which have been implemented Group model
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.GroupRepository.#ctor(System.String)">
            <summary>
            Constructor group repository
            </summary>
            <param name="dbConStr">database connection string</param>
        </member>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.StudentRepository">
            <summary>
            Student repository which have been implemented Student model
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.StudentRepository.#ctor(System.String)">
            <summary>
            Constructor student repository
            </summary>
            <param name="dbConStr">database connection string</param>
        </member>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1">
            <summary>
            Abstract class for CRUD system
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.DbConString">
            <summary>
            Connection string to database
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.#ctor(System.String)">
            <summary>
            Constructor <see cref="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1"/>
            </summary>
            <param name="dbConString"><see cref="P:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.DbConString"/></param>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.Add(`0)">
            <summary>
            Add object to data base.
            </summary>
            <param name="entity">Object to add in database.</param>
            <returns></returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.GetAll">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.GetByID(System.Int32)">
            <summary>
            Get object by ID from table in database.
            </summary>
            <param name="byID"></param>
            <returns>Returns object.</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.Update(`0)">
            <summary>
            Modify an existing object. 
            </summary>
            <param name="entity"> Parameters to be changed.</param>
            <returns>Returns a new object.</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.Delete(System.Int32)">
            <summary>
            Delete object from table by ID.
            </summary>
            <param name="byID"> ID ibject</param>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.GetAddParameter(System.Object)">
            <summary>
            Private method for get property from objects and add their to list for sqlParameters
            </summary>
            <param name="obj"></param>
            <returns>returns list of sqlParameters.</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.GetUpdateParameter(System.Object)">
            <summary>
            Private method for get property from objects and add their to list for sqlParameters
            </summary>
            <param name="obj"></param>
            <returns>returns list of sqlParameters.</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.SqlCommandInstance(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Creating sqlCommand.
            </summary>
            <param name="storedProcedure">Name of stored procedure.</param>
            <param name="sqlConnection"> Sql connection sting</param>
            <returns>return sql command</returns>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.AbstractRepository`1.SqlCommandInstance(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creating sqlCommand.
            </summary>
            <param name="storedProcedure">Name of stored procedure.</param>
            <param name="sqlConnection"> Sql connection sting</param>
            <param name="sqlParamArr"> SqlParameters</param>
            <returns>return sql command</returns>
        </member>
        <member name="T:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.StudentSessionResultsRepository">
            <summary>
            Student session repository which have been implemented StudentSession model
            </summary>
        </member>
        <member name="M:DAO.DBAccessTechnology.SqlClientUsingReflectionRepository.StudentSessionResultsRepository.#ctor(System.String)">
            <summary>
            Constructor student session repository
            </summary>
            <param name="dbConStr">Database connection string</param>
        </member>
        <member name="T:DAO.Enums.DBAccessTechnologyEnum">
            <summary>
            DAO enum
            </summary>
        </member>
        <member name="F:DAO.Enums.DBAccessTechnologyEnum.SqlClientUsingReflection">
            <summary>
            Access to database with sqlClient and using Reflection technology
            </summary>
        </member>
        <member name="F:DAO.Enums.DBAccessTechnologyEnum.LINQtoSQL">
            <summary>
            Access to database with LINQtoSQL technology
            </summary>
        </member>
        <member name="T:DAO.Factories.DAOFactory">
            <summary>
            Abstract object which describes Factory
            </summary>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateExamScheduleRepositoryDAO">
            <summary>
            Create ExamSchedule instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateGroupRepositoryDAO">
            <summary>
            Abstract method to create CreateGroupRepositoryDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateStudentRepositoryDAO">
            <summary>
            Abstract method to create CreateStudentRepositoryDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateStudentSessionResultsRepositoryDAO">
            <summary>
            Abstract method to create CreateStudentSessionResultsRepositoryDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateNumberOfSessionRepositoryDAO">
            <summary>
            Abstract method to create CreateNumberOfSessionRepositoryDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAO.Factories.DAOFactory.CreateDAOFactory(DAO.Enums.DBAccessTechnologyEnum,System.String)">
            <summary>
            Factory to switch DAO technology
            </summary>
            <param name="witchDAOenum">Type of Dao technology.</param>
            <param name="dbConnectionString">data base connection sting</param>
            <returns></returns>
        </member>
        <member name="T:DAO.Factories.SqlClientUsingReflection">
            <summary>
            Access to table with SqlClient Using Reflection techology
            </summary>
        </member>
        <member name="P:DAO.Factories.SqlClientUsingReflection.DbConnectionString">
            <summary>
            Connection string to database
            </summary>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.#ctor(System.String)">
            <summary>
            Constructor <see cref="T:DAO.Factories.SqlClientUsingReflection"/>
            </summary>
            <param name="dbConnectionString"><see cref="P:DAO.Factories.SqlClientUsingReflection.DbConnectionString"/></param>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.CreateExamScheduleRepositoryDAO">
            <summary>
            Create new instance ExamScheduleRepository
            </summary>
            <returns> returns a new instance.</returns>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.CreateGroupRepositoryDAO">
            <summary>
            Create new instance GroupRepository
            </summary>
            <returns> returns a new instance.</returns>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.CreateStudentRepositoryDAO">
            <summary>
            Create new instance StudentRepository
            </summary>
            <returns> returns a new instance.</returns>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.CreateStudentSessionResultsRepositoryDAO">
            <summary>
            Create new instance StudentSessionResultsRepository
            </summary>
            <returns> returns a new instance.</returns>
        </member>
        <member name="M:DAO.Factories.SqlClientUsingReflection.CreateNumberOfSessionRepositoryDAO">
            <summary>
            Create new instance NumberOfSessionRepository
            </summary>
            <returns> returns a new instance.</returns>
        </member>
        <member name="T:DAO.Helpers.ExtensionHelpers">
            <summary>
            Extension helpers for convert to list
            </summary>
        </member>
        <member name="M:DAO.Helpers.ExtensionHelpers.ToList``1(System.Data.DataTable)">
            <summary>
            Method to convert table to list
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="table">input table</param>
            <returns>Returns list of table</returns>
        </member>
        <member name="T:DAO.Interfaces.ICRUD`1">
            <summary>
            Crud interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DAO.Interfaces.ICRUD`1.GetByID(System.Int32)">
            <summary>
            Get object by ID from table in database.
            </summary>
            <param name="byID">Object id.</param>
            <returns>Returns object.</returns>
        </member>
        <member name="M:DAO.Interfaces.ICRUD`1.Add(`0)">
            <summary>
            Add object to data base.
            </summary>
            <param name="entity">Object to add in database.</param>
            <returns></returns>
        </member>
        <member name="M:DAO.Interfaces.ICRUD`1.Delete(System.Int32)">
            <summary>
            Delete object from table by ID.
            </summary>
            <param name="byID"> ID ibject</param>
        </member>
        <member name="M:DAO.Interfaces.ICRUD`1.Update(`0)">
            <summary>
            Modify an existing object. 
            </summary>
            <param name="entity"> Parameters to be changed.</param>
            <returns>Returns a new object.</returns>
        </member>
        <member name="M:DAO.Interfaces.ICRUD`1.GetAll">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects</returns>
        </member>
    </members>
</doc>
